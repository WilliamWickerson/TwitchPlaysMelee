//Case insensitive to prefer lower case
//Ignore white space since we're tokenizing input

#press A; press B 3; press X 2-7,8-10;
#press L .8 2-7;
#unpress ...
#stick 3,4; stick left; stick left-up-left;
#cstick ...
#stick center; stick tilt (2,3) 3-4;

macro-identifier := [a-zA-Z\-]+
keywords := press | unpress | stick | cstick | center | left | right | up | down | tilt
            | A | B | X | Y | Z | L | R | START | DLEFT | DRIGHT | DUP | DDOWN
int-literal := [1-9][0-9]* | 0
float-literal := .[0-9]* | [1-9][0-9]*.[0-9]* | 0.[0-9]*
comma := ,
semicolon := ;
hyphen := -
openParen := (
closeParen := )


Script := Command (semicolon Command)* (semicolon | ε)
Command := ButtonCommand | StickCommand | MacroCommand
ButtonCommand := unpress Button Duration | press ButtonMinusLR Duration | press ButtonLR (float-literal | ε) Duration
Button := ButtonMinusLR | ButtonLR
ButtonMinusLR := A | B | X | Y | Z | START | DLEFT | DRIGHT | DUP | DDOWN
ButtonLR := L | R
Duration := Frames (comma Frames)*
Frames := int-literal (ε | hyphen int-literal)
StickCommand := (stick | cstick) Direction Duration
Direction := (tilt | ε) ((openParen (int-literal | float-literal) comma (int-literal | float-literal) closeParen)
             | (NamedDirection (hyphen NamedDirection)*))
NamedDirection := center | left | right | up | down | tilt
MacroCommand := macro-identifier (int-literal | float-literal | namedDirection)* (ε | int-literal)

macros: up-b, down-b, side-b[1] #d, fsmash[1] #d, dsmash, upsmash, ftilt[1] #d, utilt, dtilt,
        shield, light-shield, air-dodge, wavedash[2] #i #d, grab, jc-grab, jc-upsmash, taunt, ...
